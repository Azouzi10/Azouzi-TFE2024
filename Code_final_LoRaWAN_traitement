#include <Adafruit_MPU6050.h>
#include <Adafruit_Sensor.h>
#include <Wire.h>
#include <HardwareSerial.h>
#include <math.h> // Pour la fonction fabs

// Configuration pour le capteur MPU6050
Adafruit_MPU6050 mpu;
#define I2C_SDA 33
#define I2C_SCL 25
#define MPU6050_ADDR 0x68
TwoWire I2CMPU = TwoWire(0);

const int numSamples = 12000;
unsigned long previousTime = 0;
const int32_t Ts = 5; // Intervalle d'échantillonnage en millisecondes
float maxPositionValue = 0.0;
bool dataCollectionComplete = false;
unsigned int sampleIndex = 0;

// Configuration des délais et des états 
const int32_t Tacq = 20000; // Temps d'acquisition après détection: 20 secondes
bool dataAcquisitionStarted = false;
unsigned long accelerationStart = 0;
bool continueMeasuring = true;

const int ledPin = 16;
unsigned long ledPreviousTime = 0;
const unsigned long ledBlinkInterval = 1000; // 1 seconde
bool ledState = false;

// Configuration pour le module LoRa (RAK3172)
HardwareSerial SerialLoRa(1);
bool joined = false;
unsigned long lastSendTime = 0;
const unsigned long sendInterval = 10000; // Intervalle d'envoi des données en millisecondes (10 secondes)



float accelData[numSamples];
float accel_data_net[numSamples];     // accélérations nettes 
float y[numSamples];          
float y_highpass1[numSamples]; 
float velocity[numSamples]; 
float v_highpass1[numSamples]; 
float position[numSamples]; 


float tau = 1000.0 * (1.0 / (2.0 * PI * 20.0)); // constante de temps du filtre passe bas
float tau1 = 1000.0 * (1.0 / (2.0 * PI * 1)); // constante des deux filtres passe haut 
float K = Ts/tau;



void setup() {
  // Initialisation du port série pour le débogage
  Serial.begin(921600);
  Wire.begin(I2C_SDA, I2C_SCL);
  Wire.setClock(400000);

  // Initialisation de la LED
  pinMode(ledPin, OUTPUT);
  digitalWrite(ledPin, LOW);

  // Initialisation du capteur MPU6050
  if (!mpu.begin()) {
    while (1); // Boucle infinie si l'initialisation du MPU6050 échoue
  }
  mpu.setAccelerometerRange(MPU6050_RANGE_8_G);
  mpu.setFilterBandwidth(MPU6050_BAND_260_HZ);
  delay(1000);

  // Initialisation du module LoRa
  Serial1.begin(115200, SERIAL_8N1, 18, 19); 
  pinMode(23, OUTPUT);  
  digitalWrite(23, HIGH);

  Serial.println("Configuration du module LoRa (RAK3172) via AT commands");

  // Envoyer les commandes AT et vérifier les réponses
  sendATCommand("AT");
  sendATCommand("AT+DEVEUI=AC1F09FFFE0A9B92"); // Assurez-vous que DEVEUI est une chaîne de 16 caractères hexadécimaux
  sendATCommand("AT+APPEUI=EE2E2E2E2E2EE2E2"); // Assurez-vous que APPEUI est une chaîne de 16 caractères hexadécimaux
  sendATCommand("AT+APPKEY=EB808763F5ACB250D9B3EAEBC93A5D2B"); // Assurez-vous que APPKEY est une chaîne de 32 caractères hexadécimaux

  // Configurer la région (par exemple, EU868 pour l'Europe)
  sendATCommand("AT+NWM=1"); // Assurez-vous que le module est en mode LoRaWAN
  sendATCommand("AT+DR=0"); // Configurez la région à EU868 (vérifiez que '0' correspond à votre région dans la documentation)

  delay(1000); // Petite pause pour permettre au module de traiter les commandes

  sendATCommand("AT+JOIN");
  Serial.println("Commande JOIN envoyée");
}


void loop() {
  unsigned long currentTime = millis();
  sensors_event_t a, g, temp;
  mpu.getEvent(&a, &g, &temp);

  float corrected_az = a.acceleration.x - 9.81; // Correction de l'accélération due à la gravité
  float offset = 0.33;
  float accel_corr = corrected_az - offset;

  //Serial.print("accélération de la LAC : ");
  //Serial.println(accel_corr); // Affiche toujours l'accélération

  if (currentTime - previousTime >= Ts) {
    if (fabs(accel_corr) >= 20.0) {
      dataAcquisitionStarted = true;
      accelerationStart = currentTime; 
      Serial.println("Début de l'acquisition");
    }

    if (dataAcquisitionStarted) {
      // PENDANT ACQUISITION
      accelData[sampleIndex] = accel_corr;
      sampleIndex++; 
      
      // APRES ACQUISITION
      if (sampleIndex >= numSamples) {
        Serial.println("Collecte des données complète. Traitement des données...");
        processAccelerationData(accelData, y, y_highpass1);
        Serial.println("Envoi de la valeur maximale après acquisition complète.");
        reponse();
        sendMaxPositionValue(); 
        sampleIndex = 0; // Reset for next data collection cycle
        dataAcquisitionStarted = false;
        digitalWrite(ledPin, LOW);
        reset();
        Serial.println("Acquisition réinitialisée pour la prochaine détection.");
      }

      // PENDANT ACQUISITION
      if (dataAcquisitionStarted == true && currentTime - ledPreviousTime >= ledBlinkInterval) { 
        ledState = !ledState;
        digitalWrite(ledPin, ledState);
        ledPreviousTime = currentTime;
      }
    }

    previousTime = currentTime;
  }

  // Lire et afficher toutes les réponses du module RAK3172
}


void processAccelerationData(float* accel_brut, float* y, float* y_highpass1) {
  Serial.println("Début du traitement des données d'accélération...");

  float sum = 0.0;
  float mean = 0.0;

  
    y[0] = 0; 
    for (int i = 1; i < (numSamples); i++) { 
        y[i] = (1/(1+K)) * y[i-1] + (K/(1+K)) * accelData[i];
    }

 
    for (int i = 0; i < (numSamples); i++) {
        sum += y[i];
    }
    mean = sum / (Tacq/Ts);

  
    for (int i = 0; i < (numSamples) ; i++) {
        y[i] -= mean;
    }


    y_highpass1[0] = y[0];  

    for (int i = 1; i < (numSamples); i++) {
        y_highpass1[i] = (tau1/(tau1+Ts)) * (y_highpass1[i-1] + y[i] - y[i-1]); 
    }

    maxPositionValue = y_highpass1[0]; // Initialisation avec la première valeur
    for (unsigned int i = 1; i < sampleIndex; i++) {
      if (y_highpass1[i] > maxPositionValue) {
      maxPositionValue = y_highpass1[i];
    }
  }

  Serial.print("Valeur maximale trouvée : ");
  Serial.println(maxPositionValue);
}



void sendATCommand(const char* command) {
  Serial1.println(command);
  Serial.print("Envoi de la commande AT: ");
  Serial.println(command);
  delay(2000); // Délai pour que le module traite la commande
  reponse();
}



void reponse() {
  while (Serial1.available()) {
    String line = Serial1.readStringUntil('\n');
    Serial.print("Réponse du module LoRa: ");
    Serial.println(line);
    if (line.indexOf("+EVT:JOINED") != -1) {
      Serial.println("Appareil rejoint le réseau avec succès!");
      joined = true;
    } else if (line.indexOf("+EVT:JOIN_FAILED") != -1) {
      Serial.println("Échec de la jonction!");
      joined = false;
    } else if (line.indexOf("AT_BUSY_ERROR") != -1) {
      delay(10); // Attendre avant de réessayer
    }
    line = "";
  }
}


void sendLoRaData(const char* hexData) {
  String cmd = "AT+SEND=1:"; // Port 1
  cmd += String(hexData);
  sendATCommand(cmd.c_str());
  Serial.print("Envoi des données: ");
  Serial.println(hexData);
}



void sendMaxPositionValue() {
  union {
    float f;
    uint8_t b[4];
  } floatToBytes;
  floatToBytes.f = maxPositionValue;
  char hexData[9]; // 8 caractères pour 4 octets + 1 pour le null terminator
  sprintf(hexData, "%02X%02X%02X%02X", floatToBytes.b[3], floatToBytes.b[2], floatToBytes.b[1], floatToBytes.b[0]);
  Serial.print("Envoi de la valeur maximale : ");
  Serial.println(hexData); // Ajout pour vérifier l'envoi des données
  sendLoRaData(hexData);
}


void reset() {
  
  for (int i = 0 ;  i<=(numSamples) ; i++) {
        accelData[i] =0;
        y[i] = 0;
        y_highpass1[i] = 0;
        velocity[i] = 0;
        v_highpass1[i] = 0;
        position[i] = 0;

  }
}
